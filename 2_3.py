'''
2_3_1
Одним из самых часто используемых классов в Python является класс filter. 
Он принимает в конструкторе два аргумента a и f – последовательность и функцию, 
и позволяет проитерироваться только по таким элементам x из последовательности a,
что f(x) равно True. Будем говорить, что в этом случае функция f допускает 
элемент x, а элемент x является допущенным.

В данной задаче мы просим вас реализовать класс multifilter, который будет 
выполнять ту же функцию, что и стандартный класс filter, но будет использовать 
не одну функцию, а несколько.

Решение о допуске элемента будет приниматься на основании того, сколько функций 
допускают этот элемент, и сколько не допускают. Обозначим эти количества за pos и neg.

Введем понятие решающей функции – это функция, которая принимает два 
аргумента – количества pos и neg, и возвращает True, если элемент допущен, и False иначе.

Рассмотрим процесс допуска подробнее на следующем примере.
a = [1, 2, 3]
f2(x) = x % 2 == 0 # возвращает True, если x делится на 2
f3(x) = x % 3 == 0
judge_any(pos, neg) = pos >= 1 # возвращает True, если хотя бы одна функция 
допускает элемент

В этом примере мы хотим отфильтровать последовательность a и оставить только те 
элементы, которые делятся на два или на три.

Функция f2 допускает только элементы, делящиеся на два, а функция f3 допускает 
только элементы, делящиеся на три. Решающая функция допускает элемент в случае, 
если он был допущен хотя бы одной из функций f2 или f3, то есть элементы, которые 
делятся на два или на три.
'''
def mul2(x):
    return x % 2 == 0

def mul3(x):
    return x % 3 == 0

def mul5(x):
    return x % 5 == 0


a = [i for i in range(31)] # [0, 1, 2, ... , 30]

class multifilter:

    def judge_half(pos, neg):
        # допускает элемент, если его допускает хотя бы половина функций (pos >= neg)
        return pos >= neg

    def judge_any(pos, neg):
        # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)
        return pos >= 1

    def judge_all(pos, neg):
        # допускает элемент, если его допускают все функции (neg == 0)
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        # iterable - исходная последовательность
        # funcs - допускающие функции
        # judge - решающая функция
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        # возвращает итератор по результирующей последовательности
        for iterate in self.iterable:
            pos = 0
            neg = 0
            for func in self.funcs:
                if func(iterate):
                    pos += 1
                else:
                    neg += 1
            if self.judge(pos, neg):
                yield iterate
				

'''
2_3_2
Реализуйте функцию-генератор primes, которая будет генерировать простые числа в порядке возрастания, начиная с числа 2.
'''
def is_prime(num):
    if num == 2: return True
    if num % 2 == 0: return False
    for _ in range(3, num // 2, 2):
        if num % _ == 0:
            return False
    return True

def primes():
    num = 2
    while True:
        if is_prime(num):
            yield num
        num += 1
